//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MovieNetWpf.ServiceFacade {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceFacade.IFacade")]
    public interface IFacade {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateActor", ReplyAction="http://tempuri.org/IFacade/CreateActorResponse")]
        int CreateActor(string Firstname, string Lastname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateActor", ReplyAction="http://tempuri.org/IFacade/CreateActorResponse")]
        System.Threading.Tasks.Task<int> CreateActorAsync(string Firstname, string Lastname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteActor", ReplyAction="http://tempuri.org/IFacade/DeleteActorResponse")]
        void DeleteActor(int Id_actor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteActor", ReplyAction="http://tempuri.org/IFacade/DeleteActorResponse")]
        System.Threading.Tasks.Task DeleteActorAsync(int Id_actor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyActor", ReplyAction="http://tempuri.org/IFacade/ModifyActorResponse")]
        void ModifyActor(int id, string Firstname, string Lastname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyActor", ReplyAction="http://tempuri.org/IFacade/ModifyActorResponse")]
        System.Threading.Tasks.Task ModifyActorAsync(int id, string Firstname, string Lastname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneActor", ReplyAction="http://tempuri.org/IFacade/SelectOneActorResponse")]
        MovieNET.Actor SelectOneActor(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneActor", ReplyAction="http://tempuri.org/IFacade/SelectOneActorResponse")]
        System.Threading.Tasks.Task<MovieNET.Actor> SelectOneActorAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllActor", ReplyAction="http://tempuri.org/IFacade/SelectAllActorResponse")]
        System.Collections.Generic.List<MovieNET.Actor> SelectAllActor();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllActor", ReplyAction="http://tempuri.org/IFacade/SelectAllActorResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Actor>> SelectAllActorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectActorByMovie", ReplyAction="http://tempuri.org/IFacade/SelectActorByMovieResponse")]
        System.Collections.Generic.List<MovieNET.Actor> SelectActorByMovie(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectActorByMovie", ReplyAction="http://tempuri.org/IFacade/SelectActorByMovieResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Actor>> SelectActorByMovieAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateComment", ReplyAction="http://tempuri.org/IFacade/CreateCommentResponse")]
        int CreateComment(int Id_movie, int Id_user, string Comment1, int Rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateComment", ReplyAction="http://tempuri.org/IFacade/CreateCommentResponse")]
        System.Threading.Tasks.Task<int> CreateCommentAsync(int Id_movie, int Id_user, string Comment1, int Rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteComment", ReplyAction="http://tempuri.org/IFacade/DeleteCommentResponse")]
        void DeleteComment(int Id_comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteComment", ReplyAction="http://tempuri.org/IFacade/DeleteCommentResponse")]
        System.Threading.Tasks.Task DeleteCommentAsync(int Id_comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyComment", ReplyAction="http://tempuri.org/IFacade/ModifyCommentResponse")]
        void ModifyComment(int id, int Id_movie, int Id_user, string Comment1, int Rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyComment", ReplyAction="http://tempuri.org/IFacade/ModifyCommentResponse")]
        System.Threading.Tasks.Task ModifyCommentAsync(int id, int Id_movie, int Id_user, string Comment1, int Rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneComment", ReplyAction="http://tempuri.org/IFacade/SelectOneCommentResponse")]
        MovieNET.Comment SelectOneComment(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneComment", ReplyAction="http://tempuri.org/IFacade/SelectOneCommentResponse")]
        System.Threading.Tasks.Task<MovieNET.Comment> SelectOneCommentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllComment", ReplyAction="http://tempuri.org/IFacade/SelectAllCommentResponse")]
        System.Collections.Generic.List<MovieNET.Comment> SelectAllComment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllComment", ReplyAction="http://tempuri.org/IFacade/SelectAllCommentResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Comment>> SelectAllCommentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectCommentByMovie", ReplyAction="http://tempuri.org/IFacade/SelectCommentByMovieResponse")]
        System.Collections.Generic.List<MovieNET.Comment> SelectCommentByMovie(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectCommentByMovie", ReplyAction="http://tempuri.org/IFacade/SelectCommentByMovieResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Comment>> SelectCommentByMovieAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectRating", ReplyAction="http://tempuri.org/IFacade/SelectRatingResponse")]
        double SelectRating(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectRating", ReplyAction="http://tempuri.org/IFacade/SelectRatingResponse")]
        System.Threading.Tasks.Task<double> SelectRatingAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateDirector", ReplyAction="http://tempuri.org/IFacade/CreateDirectorResponse")]
        int CreateDirector(string Firstname, string Lastname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateDirector", ReplyAction="http://tempuri.org/IFacade/CreateDirectorResponse")]
        System.Threading.Tasks.Task<int> CreateDirectorAsync(string Firstname, string Lastname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteDirector", ReplyAction="http://tempuri.org/IFacade/DeleteDirectorResponse")]
        void DeleteDirector(int Id_director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteDirector", ReplyAction="http://tempuri.org/IFacade/DeleteDirectorResponse")]
        System.Threading.Tasks.Task DeleteDirectorAsync(int Id_director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyDirector", ReplyAction="http://tempuri.org/IFacade/ModifyDirectorResponse")]
        void ModifyDirector(int id, string Firstname, string Lastname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyDirector", ReplyAction="http://tempuri.org/IFacade/ModifyDirectorResponse")]
        System.Threading.Tasks.Task ModifyDirectorAsync(int id, string Firstname, string Lastname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneDirector", ReplyAction="http://tempuri.org/IFacade/SelectOneDirectorResponse")]
        MovieNET.Director SelectOneDirector(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneDirector", ReplyAction="http://tempuri.org/IFacade/SelectOneDirectorResponse")]
        System.Threading.Tasks.Task<MovieNET.Director> SelectOneDirectorAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllDirector", ReplyAction="http://tempuri.org/IFacade/SelectAllDirectorResponse")]
        System.Collections.Generic.List<MovieNET.Director> SelectAllDirector();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllDirector", ReplyAction="http://tempuri.org/IFacade/SelectAllDirectorResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Director>> SelectAllDirectorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateImage", ReplyAction="http://tempuri.org/IFacade/CreateImageResponse")]
        int CreateImage(string URL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateImage", ReplyAction="http://tempuri.org/IFacade/CreateImageResponse")]
        System.Threading.Tasks.Task<int> CreateImageAsync(string URL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteImage", ReplyAction="http://tempuri.org/IFacade/DeleteImageResponse")]
        void DeleteImage(int Id_image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteImage", ReplyAction="http://tempuri.org/IFacade/DeleteImageResponse")]
        System.Threading.Tasks.Task DeleteImageAsync(int Id_image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyImage", ReplyAction="http://tempuri.org/IFacade/ModifyImageResponse")]
        void ModifyImage(int id, string URL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyImage", ReplyAction="http://tempuri.org/IFacade/ModifyImageResponse")]
        System.Threading.Tasks.Task ModifyImageAsync(int id, string URL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneImage", ReplyAction="http://tempuri.org/IFacade/SelectOneImageResponse")]
        MovieNET.Image SelectOneImage(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneImage", ReplyAction="http://tempuri.org/IFacade/SelectOneImageResponse")]
        System.Threading.Tasks.Task<MovieNET.Image> SelectOneImageAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllImage", ReplyAction="http://tempuri.org/IFacade/SelectAllImageResponse")]
        System.Collections.Generic.List<MovieNET.Image> SelectAllImage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllImage", ReplyAction="http://tempuri.org/IFacade/SelectAllImageResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Image>> SelectAllImageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateMovie", ReplyAction="http://tempuri.org/IFacade/CreateMovieResponse")]
        int CreateMovie(string Title, string Synopsis, System.TimeSpan Duration, int Id_type, int Id_director, int Id_image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateMovie", ReplyAction="http://tempuri.org/IFacade/CreateMovieResponse")]
        System.Threading.Tasks.Task<int> CreateMovieAsync(string Title, string Synopsis, System.TimeSpan Duration, int Id_type, int Id_director, int Id_image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteMovie", ReplyAction="http://tempuri.org/IFacade/DeleteMovieResponse")]
        void DeleteMovie(int Id_movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteMovie", ReplyAction="http://tempuri.org/IFacade/DeleteMovieResponse")]
        System.Threading.Tasks.Task DeleteMovieAsync(int Id_movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyMovie", ReplyAction="http://tempuri.org/IFacade/ModifyMovieResponse")]
        void ModifyMovie(int id, string Title, string Synopsis, System.TimeSpan Duration, int Id_type, int Id_director, int Id_image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyMovie", ReplyAction="http://tempuri.org/IFacade/ModifyMovieResponse")]
        System.Threading.Tasks.Task ModifyMovieAsync(int id, string Title, string Synopsis, System.TimeSpan Duration, int Id_type, int Id_director, int Id_image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneMovie", ReplyAction="http://tempuri.org/IFacade/SelectOneMovieResponse")]
        MovieNET.Movie SelectOneMovie(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneMovie", ReplyAction="http://tempuri.org/IFacade/SelectOneMovieResponse")]
        System.Threading.Tasks.Task<MovieNET.Movie> SelectOneMovieAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllMovie", ReplyAction="http://tempuri.org/IFacade/SelectAllMovieResponse")]
        System.Collections.Generic.List<MovieNET.Movie> SelectAllMovie();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllMovie", ReplyAction="http://tempuri.org/IFacade/SelectAllMovieResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Movie>> SelectAllMovieAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/AddMovieActors", ReplyAction="http://tempuri.org/IFacade/AddMovieActorsResponse")]
        void AddMovieActors(int Id_movie, System.Collections.Generic.List<int> Id_actors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/AddMovieActors", ReplyAction="http://tempuri.org/IFacade/AddMovieActorsResponse")]
        System.Threading.Tasks.Task AddMovieActorsAsync(int Id_movie, System.Collections.Generic.List<int> Id_actors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteMovieActors", ReplyAction="http://tempuri.org/IFacade/DeleteMovieActorsResponse")]
        void DeleteMovieActors(int Id_movie, System.Collections.Generic.List<int> Id_actors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteMovieActors", ReplyAction="http://tempuri.org/IFacade/DeleteMovieActorsResponse")]
        System.Threading.Tasks.Task DeleteMovieActorsAsync(int Id_movie, System.Collections.Generic.List<int> Id_actors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectMovieByTitle", ReplyAction="http://tempuri.org/IFacade/SelectMovieByTitleResponse")]
        System.Collections.Generic.List<MovieNET.Movie> SelectMovieByTitle(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectMovieByTitle", ReplyAction="http://tempuri.org/IFacade/SelectMovieByTitleResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Movie>> SelectMovieByTitleAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectMovieByMovieType", ReplyAction="http://tempuri.org/IFacade/SelectMovieByMovieTypeResponse")]
        System.Collections.Generic.List<MovieNET.Movie> SelectMovieByMovieType(string movieType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectMovieByMovieType", ReplyAction="http://tempuri.org/IFacade/SelectMovieByMovieTypeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Movie>> SelectMovieByMovieTypeAsync(string movieType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateMovieType", ReplyAction="http://tempuri.org/IFacade/CreateMovieTypeResponse")]
        int CreateMovieType(string Type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateMovieType", ReplyAction="http://tempuri.org/IFacade/CreateMovieTypeResponse")]
        System.Threading.Tasks.Task<int> CreateMovieTypeAsync(string Type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteMovieType", ReplyAction="http://tempuri.org/IFacade/DeleteMovieTypeResponse")]
        void DeleteMovieType(int Id_movieType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteMovieType", ReplyAction="http://tempuri.org/IFacade/DeleteMovieTypeResponse")]
        System.Threading.Tasks.Task DeleteMovieTypeAsync(int Id_movieType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyMovieType", ReplyAction="http://tempuri.org/IFacade/ModifyMovieTypeResponse")]
        void ModifyMovieType(int id, string Type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyMovieType", ReplyAction="http://tempuri.org/IFacade/ModifyMovieTypeResponse")]
        System.Threading.Tasks.Task ModifyMovieTypeAsync(int id, string Type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneMovieType", ReplyAction="http://tempuri.org/IFacade/SelectOneMovieTypeResponse")]
        MovieNET.MovieType SelectOneMovieType(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneMovieType", ReplyAction="http://tempuri.org/IFacade/SelectOneMovieTypeResponse")]
        System.Threading.Tasks.Task<MovieNET.MovieType> SelectOneMovieTypeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllMovieType", ReplyAction="http://tempuri.org/IFacade/SelectAllMovieTypeResponse")]
        System.Collections.Generic.List<MovieNET.MovieType> SelectAllMovieType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllMovieType", ReplyAction="http://tempuri.org/IFacade/SelectAllMovieTypeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.MovieType>> SelectAllMovieTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateUser", ReplyAction="http://tempuri.org/IFacade/CreateUserResponse")]
        int CreateUser(string Login, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CreateUser", ReplyAction="http://tempuri.org/IFacade/CreateUserResponse")]
        System.Threading.Tasks.Task<int> CreateUserAsync(string Login, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteUser", ReplyAction="http://tempuri.org/IFacade/DeleteUserResponse")]
        void DeleteUser(int Id_user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/DeleteUser", ReplyAction="http://tempuri.org/IFacade/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(int Id_user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyUser", ReplyAction="http://tempuri.org/IFacade/ModifyUserResponse")]
        void ModifyUser(int id, string Login, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/ModifyUser", ReplyAction="http://tempuri.org/IFacade/ModifyUserResponse")]
        System.Threading.Tasks.Task ModifyUserAsync(int id, string Login, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneUser", ReplyAction="http://tempuri.org/IFacade/SelectOneUserResponse")]
        MovieNET.User SelectOneUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectOneUser", ReplyAction="http://tempuri.org/IFacade/SelectOneUserResponse")]
        System.Threading.Tasks.Task<MovieNET.User> SelectOneUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllUser", ReplyAction="http://tempuri.org/IFacade/SelectAllUserResponse")]
        System.Collections.Generic.List<MovieNET.User> SelectAllUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectAllUser", ReplyAction="http://tempuri.org/IFacade/SelectAllUserResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.User>> SelectAllUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CheckUser", ReplyAction="http://tempuri.org/IFacade/CheckUserResponse")]
        bool CheckUser(string Login, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CheckUser", ReplyAction="http://tempuri.org/IFacade/CheckUserResponse")]
        System.Threading.Tasks.Task<bool> CheckUserAsync(string Login, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CheckUserExist", ReplyAction="http://tempuri.org/IFacade/CheckUserExistResponse")]
        bool CheckUserExist(string Login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/CheckUserExist", ReplyAction="http://tempuri.org/IFacade/CheckUserExistResponse")]
        System.Threading.Tasks.Task<bool> CheckUserExistAsync(string Login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectIdByLogin", ReplyAction="http://tempuri.org/IFacade/SelectIdByLoginResponse")]
        int SelectIdByLogin(string Login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacade/SelectIdByLogin", ReplyAction="http://tempuri.org/IFacade/SelectIdByLoginResponse")]
        System.Threading.Tasks.Task<int> SelectIdByLoginAsync(string Login);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFacadeChannel : MovieNetWpf.ServiceFacade.IFacade, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FacadeClient : System.ServiceModel.ClientBase<MovieNetWpf.ServiceFacade.IFacade>, MovieNetWpf.ServiceFacade.IFacade {
        
        public FacadeClient() {
        }
        
        public FacadeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FacadeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacadeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacadeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int CreateActor(string Firstname, string Lastname) {
            return base.Channel.CreateActor(Firstname, Lastname);
        }
        
        public System.Threading.Tasks.Task<int> CreateActorAsync(string Firstname, string Lastname) {
            return base.Channel.CreateActorAsync(Firstname, Lastname);
        }
        
        public void DeleteActor(int Id_actor) {
            base.Channel.DeleteActor(Id_actor);
        }
        
        public System.Threading.Tasks.Task DeleteActorAsync(int Id_actor) {
            return base.Channel.DeleteActorAsync(Id_actor);
        }
        
        public void ModifyActor(int id, string Firstname, string Lastname) {
            base.Channel.ModifyActor(id, Firstname, Lastname);
        }
        
        public System.Threading.Tasks.Task ModifyActorAsync(int id, string Firstname, string Lastname) {
            return base.Channel.ModifyActorAsync(id, Firstname, Lastname);
        }
        
        public MovieNET.Actor SelectOneActor(int id) {
            return base.Channel.SelectOneActor(id);
        }
        
        public System.Threading.Tasks.Task<MovieNET.Actor> SelectOneActorAsync(int id) {
            return base.Channel.SelectOneActorAsync(id);
        }
        
        public System.Collections.Generic.List<MovieNET.Actor> SelectAllActor() {
            return base.Channel.SelectAllActor();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Actor>> SelectAllActorAsync() {
            return base.Channel.SelectAllActorAsync();
        }
        
        public System.Collections.Generic.List<MovieNET.Actor> SelectActorByMovie(int id) {
            return base.Channel.SelectActorByMovie(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Actor>> SelectActorByMovieAsync(int id) {
            return base.Channel.SelectActorByMovieAsync(id);
        }
        
        public int CreateComment(int Id_movie, int Id_user, string Comment1, int Rating) {
            return base.Channel.CreateComment(Id_movie, Id_user, Comment1, Rating);
        }
        
        public System.Threading.Tasks.Task<int> CreateCommentAsync(int Id_movie, int Id_user, string Comment1, int Rating) {
            return base.Channel.CreateCommentAsync(Id_movie, Id_user, Comment1, Rating);
        }
        
        public void DeleteComment(int Id_comment) {
            base.Channel.DeleteComment(Id_comment);
        }
        
        public System.Threading.Tasks.Task DeleteCommentAsync(int Id_comment) {
            return base.Channel.DeleteCommentAsync(Id_comment);
        }
        
        public void ModifyComment(int id, int Id_movie, int Id_user, string Comment1, int Rating) {
            base.Channel.ModifyComment(id, Id_movie, Id_user, Comment1, Rating);
        }
        
        public System.Threading.Tasks.Task ModifyCommentAsync(int id, int Id_movie, int Id_user, string Comment1, int Rating) {
            return base.Channel.ModifyCommentAsync(id, Id_movie, Id_user, Comment1, Rating);
        }
        
        public MovieNET.Comment SelectOneComment(int id) {
            return base.Channel.SelectOneComment(id);
        }
        
        public System.Threading.Tasks.Task<MovieNET.Comment> SelectOneCommentAsync(int id) {
            return base.Channel.SelectOneCommentAsync(id);
        }
        
        public System.Collections.Generic.List<MovieNET.Comment> SelectAllComment() {
            return base.Channel.SelectAllComment();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Comment>> SelectAllCommentAsync() {
            return base.Channel.SelectAllCommentAsync();
        }
        
        public System.Collections.Generic.List<MovieNET.Comment> SelectCommentByMovie(int id) {
            return base.Channel.SelectCommentByMovie(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Comment>> SelectCommentByMovieAsync(int id) {
            return base.Channel.SelectCommentByMovieAsync(id);
        }
        
        public double SelectRating(int id) {
            return base.Channel.SelectRating(id);
        }
        
        public System.Threading.Tasks.Task<double> SelectRatingAsync(int id) {
            return base.Channel.SelectRatingAsync(id);
        }
        
        public int CreateDirector(string Firstname, string Lastname) {
            return base.Channel.CreateDirector(Firstname, Lastname);
        }
        
        public System.Threading.Tasks.Task<int> CreateDirectorAsync(string Firstname, string Lastname) {
            return base.Channel.CreateDirectorAsync(Firstname, Lastname);
        }
        
        public void DeleteDirector(int Id_director) {
            base.Channel.DeleteDirector(Id_director);
        }
        
        public System.Threading.Tasks.Task DeleteDirectorAsync(int Id_director) {
            return base.Channel.DeleteDirectorAsync(Id_director);
        }
        
        public void ModifyDirector(int id, string Firstname, string Lastname) {
            base.Channel.ModifyDirector(id, Firstname, Lastname);
        }
        
        public System.Threading.Tasks.Task ModifyDirectorAsync(int id, string Firstname, string Lastname) {
            return base.Channel.ModifyDirectorAsync(id, Firstname, Lastname);
        }
        
        public MovieNET.Director SelectOneDirector(int id) {
            return base.Channel.SelectOneDirector(id);
        }
        
        public System.Threading.Tasks.Task<MovieNET.Director> SelectOneDirectorAsync(int id) {
            return base.Channel.SelectOneDirectorAsync(id);
        }
        
        public System.Collections.Generic.List<MovieNET.Director> SelectAllDirector() {
            return base.Channel.SelectAllDirector();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Director>> SelectAllDirectorAsync() {
            return base.Channel.SelectAllDirectorAsync();
        }
        
        public int CreateImage(string URL) {
            return base.Channel.CreateImage(URL);
        }
        
        public System.Threading.Tasks.Task<int> CreateImageAsync(string URL) {
            return base.Channel.CreateImageAsync(URL);
        }
        
        public void DeleteImage(int Id_image) {
            base.Channel.DeleteImage(Id_image);
        }
        
        public System.Threading.Tasks.Task DeleteImageAsync(int Id_image) {
            return base.Channel.DeleteImageAsync(Id_image);
        }
        
        public void ModifyImage(int id, string URL) {
            base.Channel.ModifyImage(id, URL);
        }
        
        public System.Threading.Tasks.Task ModifyImageAsync(int id, string URL) {
            return base.Channel.ModifyImageAsync(id, URL);
        }
        
        public MovieNET.Image SelectOneImage(int id) {
            return base.Channel.SelectOneImage(id);
        }
        
        public System.Threading.Tasks.Task<MovieNET.Image> SelectOneImageAsync(int id) {
            return base.Channel.SelectOneImageAsync(id);
        }
        
        public System.Collections.Generic.List<MovieNET.Image> SelectAllImage() {
            return base.Channel.SelectAllImage();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Image>> SelectAllImageAsync() {
            return base.Channel.SelectAllImageAsync();
        }
        
        public int CreateMovie(string Title, string Synopsis, System.TimeSpan Duration, int Id_type, int Id_director, int Id_image) {
            return base.Channel.CreateMovie(Title, Synopsis, Duration, Id_type, Id_director, Id_image);
        }
        
        public System.Threading.Tasks.Task<int> CreateMovieAsync(string Title, string Synopsis, System.TimeSpan Duration, int Id_type, int Id_director, int Id_image) {
            return base.Channel.CreateMovieAsync(Title, Synopsis, Duration, Id_type, Id_director, Id_image);
        }
        
        public void DeleteMovie(int Id_movie) {
            base.Channel.DeleteMovie(Id_movie);
        }
        
        public System.Threading.Tasks.Task DeleteMovieAsync(int Id_movie) {
            return base.Channel.DeleteMovieAsync(Id_movie);
        }
        
        public void ModifyMovie(int id, string Title, string Synopsis, System.TimeSpan Duration, int Id_type, int Id_director, int Id_image) {
            base.Channel.ModifyMovie(id, Title, Synopsis, Duration, Id_type, Id_director, Id_image);
        }
        
        public System.Threading.Tasks.Task ModifyMovieAsync(int id, string Title, string Synopsis, System.TimeSpan Duration, int Id_type, int Id_director, int Id_image) {
            return base.Channel.ModifyMovieAsync(id, Title, Synopsis, Duration, Id_type, Id_director, Id_image);
        }
        
        public MovieNET.Movie SelectOneMovie(int id) {
            return base.Channel.SelectOneMovie(id);
        }
        
        public System.Threading.Tasks.Task<MovieNET.Movie> SelectOneMovieAsync(int id) {
            return base.Channel.SelectOneMovieAsync(id);
        }
        
        public System.Collections.Generic.List<MovieNET.Movie> SelectAllMovie() {
            return base.Channel.SelectAllMovie();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Movie>> SelectAllMovieAsync() {
            return base.Channel.SelectAllMovieAsync();
        }
        
        public void AddMovieActors(int Id_movie, System.Collections.Generic.List<int> Id_actors) {
            base.Channel.AddMovieActors(Id_movie, Id_actors);
        }
        
        public System.Threading.Tasks.Task AddMovieActorsAsync(int Id_movie, System.Collections.Generic.List<int> Id_actors) {
            return base.Channel.AddMovieActorsAsync(Id_movie, Id_actors);
        }
        
        public void DeleteMovieActors(int Id_movie, System.Collections.Generic.List<int> Id_actors) {
            base.Channel.DeleteMovieActors(Id_movie, Id_actors);
        }
        
        public System.Threading.Tasks.Task DeleteMovieActorsAsync(int Id_movie, System.Collections.Generic.List<int> Id_actors) {
            return base.Channel.DeleteMovieActorsAsync(Id_movie, Id_actors);
        }
        
        public System.Collections.Generic.List<MovieNET.Movie> SelectMovieByTitle(string title) {
            return base.Channel.SelectMovieByTitle(title);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Movie>> SelectMovieByTitleAsync(string title) {
            return base.Channel.SelectMovieByTitleAsync(title);
        }
        
        public System.Collections.Generic.List<MovieNET.Movie> SelectMovieByMovieType(string movieType) {
            return base.Channel.SelectMovieByMovieType(movieType);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.Movie>> SelectMovieByMovieTypeAsync(string movieType) {
            return base.Channel.SelectMovieByMovieTypeAsync(movieType);
        }
        
        public int CreateMovieType(string Type) {
            return base.Channel.CreateMovieType(Type);
        }
        
        public System.Threading.Tasks.Task<int> CreateMovieTypeAsync(string Type) {
            return base.Channel.CreateMovieTypeAsync(Type);
        }
        
        public void DeleteMovieType(int Id_movieType) {
            base.Channel.DeleteMovieType(Id_movieType);
        }
        
        public System.Threading.Tasks.Task DeleteMovieTypeAsync(int Id_movieType) {
            return base.Channel.DeleteMovieTypeAsync(Id_movieType);
        }
        
        public void ModifyMovieType(int id, string Type) {
            base.Channel.ModifyMovieType(id, Type);
        }
        
        public System.Threading.Tasks.Task ModifyMovieTypeAsync(int id, string Type) {
            return base.Channel.ModifyMovieTypeAsync(id, Type);
        }
        
        public MovieNET.MovieType SelectOneMovieType(int id) {
            return base.Channel.SelectOneMovieType(id);
        }
        
        public System.Threading.Tasks.Task<MovieNET.MovieType> SelectOneMovieTypeAsync(int id) {
            return base.Channel.SelectOneMovieTypeAsync(id);
        }
        
        public System.Collections.Generic.List<MovieNET.MovieType> SelectAllMovieType() {
            return base.Channel.SelectAllMovieType();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.MovieType>> SelectAllMovieTypeAsync() {
            return base.Channel.SelectAllMovieTypeAsync();
        }
        
        public int CreateUser(string Login, string Password) {
            return base.Channel.CreateUser(Login, Password);
        }
        
        public System.Threading.Tasks.Task<int> CreateUserAsync(string Login, string Password) {
            return base.Channel.CreateUserAsync(Login, Password);
        }
        
        public void DeleteUser(int Id_user) {
            base.Channel.DeleteUser(Id_user);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(int Id_user) {
            return base.Channel.DeleteUserAsync(Id_user);
        }
        
        public void ModifyUser(int id, string Login, string Password) {
            base.Channel.ModifyUser(id, Login, Password);
        }
        
        public System.Threading.Tasks.Task ModifyUserAsync(int id, string Login, string Password) {
            return base.Channel.ModifyUserAsync(id, Login, Password);
        }
        
        public MovieNET.User SelectOneUser(int id) {
            return base.Channel.SelectOneUser(id);
        }
        
        public System.Threading.Tasks.Task<MovieNET.User> SelectOneUserAsync(int id) {
            return base.Channel.SelectOneUserAsync(id);
        }
        
        public System.Collections.Generic.List<MovieNET.User> SelectAllUser() {
            return base.Channel.SelectAllUser();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MovieNET.User>> SelectAllUserAsync() {
            return base.Channel.SelectAllUserAsync();
        }
        
        public bool CheckUser(string Login, string Password) {
            return base.Channel.CheckUser(Login, Password);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUserAsync(string Login, string Password) {
            return base.Channel.CheckUserAsync(Login, Password);
        }
        
        public bool CheckUserExist(string Login) {
            return base.Channel.CheckUserExist(Login);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUserExistAsync(string Login) {
            return base.Channel.CheckUserExistAsync(Login);
        }
        
        public int SelectIdByLogin(string Login) {
            return base.Channel.SelectIdByLogin(Login);
        }
        
        public System.Threading.Tasks.Task<int> SelectIdByLoginAsync(string Login) {
            return base.Channel.SelectIdByLoginAsync(Login);
        }
    }
}
